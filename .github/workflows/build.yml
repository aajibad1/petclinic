# build.yml
on:
  pull_request:
    branches: [ master ]  
  push:
    branches: [ master ]  

name: Build and Push to ECR

# https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html
env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_DEFAULT_OUTPUT: json
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CONTAINER_IMAGE: app:${{ github.sha }}
  working-directory: ./app


jobs:
  build-and-push:
    name: Build and deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:

    - name: Checkout
      uses: actions/checkout@master
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Step 1 - Create a temporary artifact downloads folder
      run: mkdir tmp

    - name: step 2 - Build with Maven and  Add artifacts to publish to the temp folder
      working-directory: ./app
      run: |
        ls -l ../tmp
        mvn clean install package
        cp -r target/*.jar ../tmp
        
    - name: Step 3 - Use the Upload Artifact GitHub Action
      uses: actions/upload-artifact@v3
      with:
        name: Package
        path: tmp
      
      
    # - name: Publish to GitHub Packages Apache Maven
    #   working-directory: ./app
    #   run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}
        

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Add steps here like linting, testing, minification, etc.
      
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and tag the image
      id: build-image
      run: |
        # Build and tag the image
        docker build \
          -t $CONTAINER_IMAGE \
          -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE ./tmp
           
    # Add additional steps here like scanning of image

    # Only push to registry on master
    - name: Push
      if: github.ref == 'refs/heads/master'
      run: |
        # Push image to AWS ECR
        echo "Pushing image to ECR..."
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE
