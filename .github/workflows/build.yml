# build.yml
on:
  pull_request:
    branches: [ master ]  
  push:
    branches: [ master ]
  # permissions:
  #   id-token: write
  #   contents: read

name: Build and Push to ECR

# https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html
env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_DEFAULT_OUTPUT: json
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CONTAINER_IMAGE: app:${{ github.sha }}


jobs:
  build-and-push:
    name: Build and deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:

    - name: Checkout
      uses: actions/checkout@master
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Step 1 - Create a temporary artifact downloads folder
      run: mkdir tmp

    - name: step 2 - Build with Maven and  Add artifacts to publish to the temp folder
      working-directory: ./app
      run: |
        ls -l ../tmp
        mvn clean install package
        cp -r target/*.jar ../tmp
        
    - name: Step 3 - Use the Upload Artifact GitHub Action
      uses: actions/upload-artifact@v3
      with:
        name: Package
        path: tmp
      
        

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: $AWS_ACCESS_KEY_ID
        aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
        #role-to-assume: arn:aws:iam::$AWS_ACCOUNT_ID:role/eks-role
        aws-region: us-east-1
        #role-session-name: GitHubActions

    # Add steps here like linting, testing, minification, etc.
      
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push docker image to Amazon ECR
      #if: github.ref == 'refs/heads/master'
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./app
        echo "Pushing image to ECR..."
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: lint helm chart
      run: helm lint ./app/helm

    - name: Package and push helm chart to Amazon ECR
      working-directory: ./app/helm
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: heml-chart
      run: |
        helm package $REPOSITORY
        helm push $REPOSITORY-0.1.0.tgz oci://$REGISTRY

    # - name: Build and tag the image
    #   id: build-image
    #   run: |
    #     # Build and tag the image
    #     docker build \
    #       -t $CONTAINER_IMAGE \
    #       -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE ./tmp
           
    # Add additional steps here like scanning of image

    # # Only push to registry on master
    # - name: Push
    #   if: github.ref == 'refs/heads/master'
    #   run: |
    #     # Push image to AWS ECR
    #     echo "Pushing image to ECR..."
    #     docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
